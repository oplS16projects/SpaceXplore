{
  "name": "Spacexplore",
  "tagline": "",
  "body": "# FP7-webpage SpaceXplore\r\n\r\n##Authors\r\nLokesh Manchi (@lokeshmanchi)\r\n\r\nRob Russell(@robdoesweb)\r\n\r\n##Overview\r\nWe're designing a 2D space shooting game that uses graphics and sound to make it fun and interesting. The user will be able to control a spaceship and the purpose of the game is to avoid and shoot the obstacles that are ahead.\r\n\r\n##Screenshot\r\n![screenshot showing game-start](startpage-everything.png)\r\n![screenshot showing game-play](game-play.png)\r\n\r\n\r\n##Concepts Demonstrated\r\n* **Object Inheritance** is used to expand a basic entity class into the different game objects.\r\n* **Map and Filter** are used to extract data from certain game objects to update and render them.\r\n* **Data Abstraction** is used to hide the way game objects store values like their position and size\r\n\r\n##External Technology and Libraries\r\nBriefly describe the existing technology you utilized, and how you used it. Provide a link to that technology(ies).\r\n####Libraries used:\r\n\r\n1. 2htdp/universe - [Racket-Universe](https://docs.racket-lang.org/teachpack/2htdpuniverse.html)\r\n2. 2htdp/image - [Racket-Images](https://docs.racket-lang.org/teachpack/2htdpimage.html)\r\n3. rsound - [Racket-Rsound] (https://docs.racket-lang.org/rsound/index.html)\r\n4. lang/posn\r\n\r\n##Favorite Scheme Expressions\r\n####Lokesh Manchi (a team member)\r\n\r\nThis code allows the user to use the arrow keys on thier keyboard to interact with the game. The way it works is if the player hits lets say the right key, in the cond statement it hits the key=? key \"right\". This tells Racket to then call the key-expr function which in this case is (player 'move-right) on the current world. The result of the call is the current world.\r\n```racket\r\n(define (handle-key-down world key)\r\n  (cond\r\n    [(key=? key \"left\") (player 'move-left)]\r\n    [(key=? key \"right\") (player 'move-right)]\r\n    [(key=? key \"up\") (player 'move-up)]\r\n    [(key=? key \"down\") (player 'move-down)]\r\n    [(key=? key \" \") (player 'shoot)]\r\n    [else world]\r\n    )\r\n)\r\n```\r\n####Rob Russell (another team member)\r\nThe render function filters through alive entities and maps their positions and sprites to new lists used to render everything in one sweet step.\r\n```scheme\r\n(define (render x)\r\n  (define ents-pos (map (λ (entity) (make-posn (entity 'x) (entity 'y))) (filter alive? ents)))\r\n  (define ents-sprites (map (λ (entity) (entity 'sprite)) (filter alive? ents)))\r\n  (define screen '())\r\n  (set! screen (place-images ents-sprites ents-pos background))\r\n  (define game-over-text (text \"GAME OVER!!! YOU DIED!!!\" 36 \"red\"))\r\n  (if game-over\r\n      (set! screen (place-images (list game-over-text) (list (make-posn 250 250)) background))\r\n      void)\r\n  screen\r\n  )\r\n```\r\n\r\n##Additional Remarks\r\nBuilding this game was really fun and the structure that exists here is now easy to expand to add more entities with custom updates (ie.. enemy ships that shoot back at the player).\r\n\r\n#How to Download and Run\r\nYou may want to link to your latest release for easy downloading by people (such as Mark).\r\n\r\n1. Click on release at the top of the page and download the most recent release\r\n2. After downloading the file extract it and place it anywhere\r\n3. Install rsound library on your computer throught the Dr.Racket package manager\r\n4. In the project release click on SpaceXplore.rkt, which is the file that starts the game\r\n5. A starter page will open up and you have to press spacebar to initialize the game (first image in the screenshot section of this file)\r\n6. A second window will pop up (second image in the screenshot section) and this is the game. The controls are the arrow keys to move around and the space bar to shoot\r\n7. Dont get hit!\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}